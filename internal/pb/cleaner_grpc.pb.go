// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: cleaner.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CleanerService_Clean_FullMethodName = "/pb.CleanerService/Clean"
)

// CleanerServiceClient is the client API for CleanerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CleanerServiceClient interface {
	Clean(ctx context.Context, in *CleanRequest, opts ...grpc.CallOption) (*CleanResponse, error)
}

type cleanerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCleanerServiceClient(cc grpc.ClientConnInterface) CleanerServiceClient {
	return &cleanerServiceClient{cc}
}

func (c *cleanerServiceClient) Clean(ctx context.Context, in *CleanRequest, opts ...grpc.CallOption) (*CleanResponse, error) {
	out := new(CleanResponse)
	err := c.cc.Invoke(ctx, CleanerService_Clean_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CleanerServiceServer is the server API for CleanerService service.
// All implementations must embed UnimplementedCleanerServiceServer
// for forward compatibility
type CleanerServiceServer interface {
	Clean(context.Context, *CleanRequest) (*CleanResponse, error)
	mustEmbedUnimplementedCleanerServiceServer()
}

// UnimplementedCleanerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCleanerServiceServer struct {
}

func (UnimplementedCleanerServiceServer) Clean(context.Context, *CleanRequest) (*CleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clean not implemented")
}
func (UnimplementedCleanerServiceServer) mustEmbedUnimplementedCleanerServiceServer() {}

// UnsafeCleanerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CleanerServiceServer will
// result in compilation errors.
type UnsafeCleanerServiceServer interface {
	mustEmbedUnimplementedCleanerServiceServer()
}

func RegisterCleanerServiceServer(s grpc.ServiceRegistrar, srv CleanerServiceServer) {
	s.RegisterService(&CleanerService_ServiceDesc, srv)
}

func _CleanerService_Clean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CleanerServiceServer).Clean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CleanerService_Clean_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CleanerServiceServer).Clean(ctx, req.(*CleanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CleanerService_ServiceDesc is the grpc.ServiceDesc for CleanerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CleanerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CleanerService",
	HandlerType: (*CleanerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Clean",
			Handler:    _CleanerService_Clean_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cleaner.proto",
}
